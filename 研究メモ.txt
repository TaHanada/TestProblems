研究メモ

今後の研究のアイデア
・実問題に関する調査
能島先生のアンケート調査より，実問題の実態を把握したい．
→目的数はそこまで大きくならないのではないか(2～8，20くらい)
また，問題設計により減らせる可能性もある(例：風車設計)
→式の組み合わせによる目的関数の変化で探索にどのような影響が出るのか？

・実問題(特に高次元の決定変数空間を持つ問題)の難しさ
風車設計問題の決定変数空間の調査
→アルゴリズム，試行によって解分布に差がある
何が課題なのか？
-シンプルに評価回数(10000)程度では解けない？
-局所解にはまっている？

・目的関数空間と決定変数空間の対応
決定変数値の変化に対する目的関数空間でのズレの大きさと向きを調査したい．
ベンチマーク問題では，問題の作成方法により，必ず決定変数ごとに役割がある
☆実問題においても存在するのかを調査したい

「他の決定変数値が変化しなければ，任意の決定変数の変化に対する目的関数値
のズレはどの個体でも同じ向きとなる？」
決定変数の次元数に対して個体群サイズを決定する
LHS的なノリ(ケバブ)で初期個体を配置し，ランダムに回転させることで新たな解を
生成し，決定変数空間と目的関数空間におけるズレを調べる．
ズレのベクトルの大きさと方向(原点方向かそれに対して垂直か)を数値化
空間全体のどれくらいの移動になるか

分割数(個体数)＊次元数　回の評価で一通りできるが...
どれくらい回転させるかで決定変数値の変化量が決まるがどの解でも一定になってしまう
→分割したあと各肉の内部でランダムに配置すれば変化量もランダムになる
他の個体とのベクトルの大きさの差でなんかつかめないか

・過去に探索したところをもう一度探索したくない

・深瀬さんのやつ追加実験
とりあえずC++のコードをGitHubへ
距離最小化問題にDots-Type制約を実装
gj(x) = d(x, cj) - rj >= 0, j = 1, 2, ..., nc
cj: ドットの中心(ランダム)
rj: 実行不可能領域の半径
nc: 制約の数
ポリゴン内を実行可能領域にする必要あり

・CM2Tの追加実験
回せることを確認する

7/13矢野
制約を決定変数の値域に組み込む→制約違反となる解をそもそも生成しない
結果的に制約違反でない解を優先的に探索する
高速化がメイン
どうやって境界を見つける？